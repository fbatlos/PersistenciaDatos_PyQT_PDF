Explicación del código
El código maneja operaciones CRUD (Crear, Leer, Actualizar y Eliminar) en una base de datos SQLite para gestionar información de viajes. Se usan consultas SQL con la biblioteca sqlite3 en Python.

1. getMisViajes(email)
¿Para qué sirve?
Esta función obtiene todos los viajes asociados a un cliente según su correo electrónico.

¿Cómo lo hace?
Conexión a la base de datos con sqlite3.connect("viajes.db").
Se crea un cursor para ejecutar la consulta SQL.
Consulta SQL con JOINs para obtener información de varias tablas relacionadas:
viaje (tabla principal)
cliente (para obtener el nombre del cliente)
vuelo (para relacionar el viaje con un vuelo)
destino (para saber a qué destino pertenece el vuelo)
Se ejecuta la consulta con el email como parámetro.
Se obtiene el resultado con fetchall().
Se cierra la conexión y se devuelve la lista de viajes.

2. putMisViajes(nueva_fecha_salida, nueva_fecha_regreso, viaje_id)
¿Para qué sirve?
Actualiza las fechas de salida y regreso de un viaje existente.

¿Cómo lo hace?
Conexión a la base de datos.
Se ejecuta una consulta SQL UPDATE con los nuevos valores.
Se confirman los cambios con commit().
Se cierra la conexión.
3. delMisViajes(viaje_id)
¿Para qué sirve?
Elimina un viaje de la base de datos según su ID.

¿Cómo lo hace?
Conexión a la base de datos.
Se ejecuta una consulta SQL DELETE con el ID del viaje.
Se confirma la eliminación con commit().
Se cierra la conexión.
4. insertar_viaje(cliente_email, vuelo_id, fecha_salida, fecha_regreso, precio)
¿Para qué sirve?
Inserta un nuevo viaje en la base de datos.

¿Cómo lo hace?
Obtiene el último ID de viaje con obtener_ultimo_id_viaje() y lo incrementa en 1.
Ejecuta un INSERT INTO en la tabla viaje con los valores recibidos.
Guarda los cambios con commit().
Cierra la conexión.

Tecnologías utilizadas
Python: Lenguaje de programación utilizado para manejar la lógica del sistema.
SQLite (sqlite3): Base de datos ligera y embebida en el proyecto.
SQL: Lenguaje de consulta para manejar la base de datos.